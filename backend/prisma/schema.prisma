// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id                String   @id @default(uuid())
  name              String   @unique
  slug              String   @unique
  description       String?
  colorScheme       Json?    // Primary and accent colors
  thumbnailUrl      String?
  bannerImageUrl    String?
  featuredVideoId   String?
  isActive          Boolean  @default(true)
  sortOrder         Int?
  videoCount        Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  videos            Video[]
  featuredVideo     Video?   @relation("FeaturedVideo", fields: [featuredVideoId], references: [id])

  @@map("collections")
  @@index([slug])
  @@index([isActive], where: { deletedAt: null })
}

model Video {
  id                String   @id @default(uuid())
  collectionId      String
  title             String
  slug              String
  description       String?
  releaseDate       DateTime?
  
  // Video Files (CDN URLs)
  hlsManifestUrl    String
  thumbnailUrl      String
  
  // Qualities Available
  has480p           Boolean  @default(false)
  has720p           Boolean  @default(false)
  has1080p          Boolean  @default(false)
  has4k             Boolean  @default(false)
  
  // Metadata
  durationSeconds   Int?
  fileSizeBytes     BigInt?
  
  // 2257 Compliance
  performerCount    Int      @default(1)
  ageVerified       Boolean  @default(false)
  
  // Statistics
  viewCount         BigInt   @default(0)
  likeCount         Int      @default(0)
  rating            Decimal? @db.Decimal(3, 2)
  
  // Status
  isFeatured        Boolean  @default(false)
  isPublished       Boolean  @default(false)
  publishedAt       DateTime?
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  collection        Collection @relation(fields: [collectionId], references: [id])
  videoPerformers   VideoPerformer[]
  photos            Photo[]
  watchHistory      UserWatchHistory[]
  featuredIn        Collection[] @relation("FeaturedVideo")

  @@map("videos")
  @@index([collectionId], where: { deletedAt: null })
  @@index([slug])
  @@index([isPublished, publishedAt], where: { deletedAt: null })
  @@index([isFeatured], where: { isPublished: true, deletedAt: null })
  @@index([releaseDate], where: { deletedAt: null })
  @@index([viewCount], where: { deletedAt: null })
}

model Performer {
  id                String   @id @default(uuid())
  name              String
  slug              String   @unique
  bio               String?
  profilePhotoUrl   String?
  coverPhotoUrl     String?
  
  // 2257 Compliance
  legalName         String?
  stageName         String?
  dateOfBirth       DateTime?
  
  // Statistics
  videoCount        Int      @default(0)
  
  // Status
  isActive          Boolean  @default(true)
  
  // Timestamps
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  deletedAt         DateTime?

  // Relations
  videoPerformers   VideoPerformer[]
  photos            Photo[]
  socialMediaLinks  SocialMediaLink[]

  @@map("performers")
  @@index([slug])
  @@index([isActive], where: { deletedAt: null })
  @@index([videoCount], where: { deletedAt: null })
}

model VideoPerformer {
  id                String   @id @default(uuid())
  videoId           String
  performerId       String
  billingOrder      Int?
  createdAt         DateTime @default(now())

  // Relations
  video             Video     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  performer         Performer @relation(fields: [performerId], references: [id], onDelete: Cascade)

  @@unique([videoId, performerId])
  @@map("video_performers")
  @@index([videoId])
  @@index([performerId])
}

model Photo {
  id                String   @id @default(uuid())
  videoId           String?
  performerId       String?
  photoType         String   // 'video_still', 'behind_scenes', 'performer_photo', 'profile'
  url               String
  thumbnailUrl      String?
  altText           String?
  
  // Metadata
  width             Int?
  height            Int?
  fileSizeBytes     Int?
  
  // Display
  sortOrder         Int?
  isPrimary         Boolean  @default(false)
  
  // Timestamps
  createdAt         DateTime @default(now())
  deletedAt         DateTime?

  // Relations
  video             Video?     @relation(fields: [videoId], references: [id], onDelete: Cascade)
  performer         Performer? @relation(fields: [performerId], references: [id], onDelete: Cascade)

  @@map("photos")
  @@index([videoId], where: { deletedAt: null })
  @@index([performerId], where: { deletedAt: null })
  @@index([photoType], where: { deletedAt: null })
}

model User {
  id                    String   @id @default(uuid())
  email                 String   @unique
  passwordHash          String
  username              String?  @unique
  firstName             String?
  lastName              String?
  
  // Age Verification Status
  ageVerified           Boolean  @default(false)
  ageVerifiedAt         DateTime?
  ageVerificationMethod String?  // 'id_upload', 'yoti', 'jumio'
  
  // Geolocation (for age verification requirements)
  countryCode           String?
  stateProvince         String?
  
  // Preferences
  preferredQuality      String   @default("1080p")
  autoplayVideos        Boolean  @default(true)
  
  // Session
  lastLoginAt           DateTime?
  lastLoginIp           String?
  
  // Status
  isActive              Boolean  @default(true)
  isVerified            Boolean  @default(false)
  emailVerifiedAt       DateTime?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  deletedAt             DateTime?

  // Relations
  subscriptions         Subscription[]
  watchHistory          UserWatchHistory[]

  @@map("users")
  @@index([email])
  @@index([username])
  @@index([isActive], where: { deletedAt: null })
}

model Subscription {
  id                    String   @id @default(uuid())
  userId                String
  planName              String   // 'monthly', 'annual'
  billingAmount         Decimal  @db.Decimal(10, 2)
  billingCurrency       String   @default("USD")
  billingCycle          String   // 'monthly', 'yearly'
  status                String   // 'active', 'canceled', 'past_due', 'expired'
  
  // Dates
  startedAt             DateTime
  currentPeriodStart    DateTime
  currentPeriodEnd      DateTime
  canceledAt            DateTime?
  canceledReason        String?
  
  // Next Billing
  nextBillingAt         DateTime?
  
  // Payment Info (tokenized)
  paymentMethodToken    String?
  last4Digits           String?
  
  // Timestamps
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("subscriptions")
  @@index([userId])
  @@index([status], where: { status: "active" })
  @@index([nextBillingAt], where: { status: "active" })
}

model SocialMediaLink {
  id                String   @id @default(uuid())
  performerId       String
  platform          String   // 'instagram', 'twitter', 'onlyfans', 'tiktok', 'custom'
  handle            String
  url               String?
  iconUrl           String?
  sortOrder         Int?
  isVerified        Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  performer         Performer @relation(fields: [performerId], references: [id], onDelete: Cascade)

  @@unique([performerId, platform])
  @@map("social_media_links")
  @@index([performerId])
}

model UserWatchHistory {
  id                    String   @id @default(uuid())
  userId                String
  videoId               String
  watchedAt             DateTime @default(now())
  watchPositionSeconds  Int      @default(0)
  completedPercentage   Decimal? @db.Decimal(5, 2)
  completed             Boolean  @default(false)

  // Relations
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  video                 Video    @relation(fields: [videoId], references: [id], onDelete: Cascade)

  @@unique([userId, videoId])
  @@map("user_watch_history")
  @@index([userId])
  @@index([videoId])
  @@index([watchedAt])
}

